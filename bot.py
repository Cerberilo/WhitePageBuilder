import os
import shutil
from zipfile import ZipFile
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import random
import logging
from api_key import API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

blocks = {
    "header": "–®–∞–ø–∫–∞ —Å–∞–π—Ç–∞",
    "banner": "–ë–∞–Ω–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–æ–π",
    "info_text": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
    "advantages": "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞",
    "gallery": "–ì–∞–ª–µ—Ä–µ—è",
    "two_columns": "–¢–µ–∫—Å—Ç –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏",
    "text_banner": "–¢–µ–∫—Å—Ç + –ë–∞–Ω–Ω–µ—Ä",
    "desc_img_1": "–û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ 1",
    "desc_img_2": "–û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ 2",
    "article": "–¢–µ–∫—Å—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º",
    "knowledge": "–ö–æ–ª–æ–Ω–∫–∞ –∞–≤—Ç–æ—Ä–∞",
    "form": "–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏",
    "footer": "–§—É—Ç–µ—Ä",
}

selected_blocks = []

def generate_random_pastel_colors():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞."""
    def random_pastel_color():
        base = random.randint(200, 255)
        return f"#{base:02x}{random.randint(180, base):02x}{random.randint(180, base):02x}"
    
    return {
        "background-header": random_pastel_color(),
        "background-intro": random_pastel_color(),
        "background-center-info": random_pastel_color(),
        "background-features": random_pastel_color(),
        "background-gallery": random_pastel_color(),
        "background-knowledge": random_pastel_color(),
        "background-subscribe": random_pastel_color(),
        "background-footer": random_pastel_color(),
    }

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [["/start –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üöÄ", "/restart –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üîÑ"]],
        resize_keyboard=True
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –±–ª–æ–∫–æ–≤
    try:
        with open("sitemap.png", "rb") as photo:
            await update.message.reply_photo(
                photo=photo,
                caption="–í–æ—Ç —Å—Ö–µ–º–∞ –±–ª–æ–∫–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –±–ª–æ–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∞–π—Ç –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é."
            )
    except FileNotFoundError:
        logging.error("–§–∞–π–ª sitemap.png –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
        await update.message.reply_text("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª sitemap.png –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ–Ω—é
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –±–ª–æ–∫–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞.",
        reply_markup=main_menu_keyboard()
    )
    await show_block_options(update, context, new_message=True)

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.",
        reply_markup=main_menu_keyboard()
    )
    selected_blocks.clear()
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã start
    await start(update, context)

async def show_block_options(update: Update, context: ContextTypes.DEFAULT_TYPE, new_message=False) -> None:
    add_buttons = [
        [InlineKeyboardButton(f"–î–æ–±–∞–≤–∏—Ç—å: {name}", callback_data=f"add_{key}")] for key, name in blocks.items()
    ]

    remove_buttons = [
        [InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å: {blocks[block]}", callback_data=f"remove_{i}")] for i, block in enumerate(selected_blocks)
    ]

    keyboard = add_buttons + [[InlineKeyboardButton("‚¨á –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ ‚¨á", callback_data="separator")]] + remove_buttons
    keyboard.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="done")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    text = (
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏:\n{format_selected_blocks()}\n\n"
        f"–î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –±–ª–æ–∫–∏. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ."
        if selected_blocks
        else "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞:"
    )

    if new_message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update.callback_query.message.edit_text(text, reply_markup=reply_markup)

def format_selected_blocks():
    return "\n".join([f"{i + 1}. {blocks[block]}" for i, block in enumerate(selected_blocks)])

async def handle_block_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    data = query.data

    if data.startswith("add_"):
        block = data.split("_", 1)[1]
        if block not in blocks:
            logging.warning(f"Invalid block key: {block}")
            await query.message.reply_text(f"–û—à–∏–±–∫–∞: –±–ª–æ–∫ '{block}' –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
            return

        selected_blocks.append(block)
        logging.info(f"Block '{blocks[block]}' added by user")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
        block_image_path = f"img_blocks/{block}.png"
        if os.path.exists(block_image_path):
            try:
                with open(block_image_path, "rb") as photo:
                    await query.message.reply_photo(
                        photo=photo,
                        caption=f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –±–ª–æ–∫: {blocks[block]}"
                    )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞ '{block}': {e}")
        else:
            logging.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–ª–æ–∫–∞ '{block}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {block_image_path}")
            await query.message.reply_text(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–ª–æ–∫–∞ '{blocks[block]}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

        await show_block_options(update, context)

    elif data.startswith("remove_"):
        index = int(data.split("_", 1)[1])
        if 0 <= index < len(selected_blocks):
            removed_block = selected_blocks.pop(index)
            logging.info(f"Block '{blocks[removed_block]}' removed by user")
        else:
            logging.warning(f"Invalid index for removal: {index}")
        await show_block_options(update, context)

    elif data == "done":
        await generate_site(update, context)

async def generate_site(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    colors = generate_random_pastel_colors()

    css_content = f"""
:root {{
    --background-header: {colors['background-header']};
    --background-intro: {colors['background-intro']};
    --background-center-info: {colors['background-center-info']};
    --background-features: {colors['background-features']};
    --background-gallery: {colors['background-gallery']};
    --background-knowledge: {colors['background-knowledge']};
    --background-subscribe: {colors['background-subscribe']};
    --background-footer: {colors['background-footer']};
}}
"""

    html_content = "<!DOCTYPE html>\n<html>\n<head>\n<style>\n" + css_content + "\n</style>\n"
    html_content += '<link rel="stylesheet" href="styles.css">\n'
    html_content += '<script src="cookies.js" defer></script>\n'
    html_content += '<script src="menu.js" defer></script>\n</head>\n<body>\n'

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞ –¥–ª—è –∫—É–∫
    html_content += """
    <div id="cookie-banner" style="display: none; position: fixed; bottom: 0; width: 100%; background: #333; color: #fff; text-align: center; padding: 10px;">
        <p> We use cookies to improve your experience on the website. <a href="privacy_policy.html" style="color: #4CAF50;">Learn more</a></p>
        <button id="accept-cookies" style="background: #4CAF50; color: #fff; border: none; padding: 10px; cursor: pointer;">Accept</button>
    </div>
    """

    for block in selected_blocks:
        if block not in blocks:
            continue
        try:
            with open(f"blocks/{block}.html", "r", encoding="utf-8") as file:
                html_content += file.read() + "\n"
        except FileNotFoundError:
            logging.error(f"File for block '{block}' not found")
            await update.callback_query.message.reply_text(f"–§–∞–π–ª –±–ª–æ–∫–∞ '{blocks[block]}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∞ '{block}': {e}")
            await update.callback_query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–ª–æ–∫–∞ '{blocks[block]}': {e}")
            return

    html_content += "</body>\n</html>"

    project_dir = "site_project"
    if os.path.exists(project_dir):
        shutil.rmtree(project_dir)
    os.makedirs(project_dir)

    with open(os.path.join(project_dir, "index.html"), "w", encoding="utf-8") as file:
        file.write(html_content)

    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
    for static_file in ["styles.css", "cookies.js", "menu.js"]:
        if os.path.exists(static_file):
            shutil.copy(static_file, os.path.join(project_dir, static_file))

    if os.path.exists("img"):
        shutil.copytree("img", os.path.join(project_dir, "img"))

    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    additional_files = ["contact.html", "privacy_policy.html", "terms_of_service.html"]
    for file_name in additional_files:
        if os.path.exists(file_name):
            shutil.copy(file_name, os.path.join(project_dir, file_name))
        else:
            logging.warning(f"–§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.")

    # –°–æ–∑–¥–∞–Ω–∏–µ ZIP-–∞—Ä—Ö–∏–≤–∞
    zip_filename = "site_project.zip"
    with ZipFile(zip_filename, "w") as zipf:
        for root, dirs, files in os.walk(project_dir):
            for file in files:
                filepath = os.path.join(root, file)
                arcname = os.path.relpath(filepath, project_dir)
                zipf.write(filepath, arcname)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ ZIP-–∞—Ä—Ö–∏–≤–∞
    try:
        await context.bot.send_document(chat_id=update.effective_chat.id, document=open(zip_filename, "rb"))
        logging.info("ZIP-–∞—Ä—Ö–∏–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=(
                "üòé –¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∫–æ–≤—ã–µ —Ñ–æ—Ç–æ –Ω–∞ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ —Å–≤–æ–µ–º —Å–∞–π—Ç–µ, "
                "–∞ —Å—Ç–æ–∫–æ–≤—ã–π —Ç–µ–∫—Å—Ç ‚Äî –Ω–∞ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–π —Ç–µ–º–∞—Ç–∏–∫–µ.\n\n"
                "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω —Å–∞–π—Ç, –Ω–∞–∂–º–∏—Ç–µ /restart"
            )
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ZIP-–∞—Ä—Ö–∏–≤–∞.")
    finally:
        if os.path.exists(project_dir):
            shutil.rmtree(project_dir)
        if os.path.exists(zip_filename):
            os.remove(zip_filename)

    reset_selections()

def reset_selections():
    global selected_blocks
    selected_blocks = []

def main() -> None:
    application = Application.builder().token(API_KEY).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("restart", restart))
    application.add_handler(CallbackQueryHandler(handle_block_selection))
    application.run_polling()

if __name__ == "__main__":
    main()
























